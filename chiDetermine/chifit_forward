#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 11 15:38:49 2022

@author: tquah
"""
import sys
sys.path.append(../)
import glob
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit,leastsq
from scipy.interpolate import interp1d,CubicSpline
import numpy as np
import re
import os

plt.close('all')
def ExtractNumber(line):
    return re.findall('-?\ *[0-9]+\.?[0-9]*(?:[Ee]\ *[-+]?\ *[0-9]+)?', line)

def Pade_Approximation(x,a,b,c):
    num = a*x+b*x**2
    den = 1+c*x
    return num/den

def extract_numberlist(lst,pos):
    rlst = []
    for ele in lst:
        rlst.append(float(ExtractNumber(ele)[pos]))
    
    return rlst



def S_ROL(N,chie):
    Status = 0
    Nbarfiles = glob.glob('ROL*dat')
    Nbarlist = extract_numberlist(Nbarfiles,0)
    loc = np.where(Nbarlist==N)[0]
    if len(loc)!=1:
        print('Too Many Nbar or too Few...skipping')
        return 0, Status
    else:
        RenormData = np.loadtxt(Nbarfiles[loc[0]])
        interp = interp1d(RenormData[:,0], RenormData[:,1])
        minvalue = np.min(RenormData[:,0])
        maxvalue = np.max(RenormData[:,0])
        if chie>minvalue and chie<maxvalue: 
            Status = 1
            return interp(chie),Status
        else:
            return 0, Status




    


# #build manually 

# # First load in the entire datasets
# Renorm = dict()
# CL_data = np.loadtxt('../PeakExtraction/CL_dataset_large.dat')
# #deal with Nbar stuff-maybe generate exact data for each point we "need"
# ROL_txt = 'ROL*dat'

# Nunique = np.unique(CL_data[:,2])
# def Create_ROL_Dictionary(ROL_txt,Nlist):
#     D = dict()
#     for i in range(len(Nlist)):
#         D[f]
#         Nbarfiles = glob.glob(ROL_txt)
#         Nbarlist = extract_numberlist(Nbarfiles,0)
#         loc = np.where(Nbarlist==Nlist[i])[0]
#         if len(loc)!=1:
#             print('Too Many Nbar or too Few...skipping')
#         else:
#             RenormData = np.loadtxt(Nbarfiles[loc[0]])
#             interp = interp1d(RenormData[:,0], RenormData[:,1])
#             minvalue = np.min(RenormData[:,0])
#             maxvalue = np.max(RenormData[:,0])
#             D['f'] 
#             D['min']
#             D['max']

    